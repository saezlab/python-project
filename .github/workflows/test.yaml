name: Test

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

jobs:

    test:
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash -e {0}  # -e to fail on error

        strategy:
            fail-fast: false
            matrix:
                python: ['3.8', '3.10']
                os: [ubuntu-latest, macos-latest]
                project_name: [project_name, alt_name]
        env:
            PROJECT_ROOT: ${{ matrix.project_name }}

        steps:
        -   uses: actions/checkout@v2
        -   name: Install Ubuntu system dependencies
            if: matrix.os == 'ubuntu-latest'
            run: |
                sudo apt-get update
                sudo apt-get install -y pandoc
        -   name: Set up Python ${{ matrix.python }}
            uses: actions/setup-python@v4
            with:
                python-version: ${{ matrix.python }}
                cache: pip
                cache-dependency-path: '**/pyproject.toml'
        -   name: Install dependencies
            run: python -m pip install --upgrade pip wheel cookiecutter pre-commit
        -   name: Load cached Poetry installation
            uses: actions/cache@v3
            with:
                path: ~/.local
                key: poetry-0
        -   name: Install Poetry
            uses: snok/install-poetry@v1
            with:
                virtualenvs-create: true
                virtualenvs-in-project: true
                installer-parallel: true
                installer.modern-installation: false
        -   name: Poetry config
            run: poetry config installer.modern-installation false
        -   name: Instantiate the template
            shell: python
            run: |
                from cookiecutter.main import cookiecutter
                overrides = dict(project_name='${{ matrix.project_name }}')
                cookiecutter('.', no_input=True, extra_context=overrides)
        -   name: Set up pre-commit cache
            uses: actions/cache@v3
            with:
                path: ~/.cache/pre-commit
                key: pre-commit-3|${{ matrix.python }}|${{ hashFiles(format('{0}/.pre-commit-config.yaml', env.PROJECT_ROOT)) }}
        -   name: Run pre-commit
            continue-on-error: true
            run: |
                cd "$PROJECT_ROOT"
                git add .
                pre-commit run --color=always --show-diff-on-failure --all-files
        -   name: Load cached Poetry venv
            id: cached-poetry-dependencies
            uses: actions/cache@v3
            with:
                path: $PROJECT_ROOT/.venv
                key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        -   name: Install project dependencies
            if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
            run: |
                cd "$PROJECT_ROOT"
                poetry install --no-interaction --no-root
        -   name: Install project as a package
            run: |
                cd "$PROJECT_ROOT"
                poetry install --no-interaction --with dev
        -   name: Build documentation
            env:
                SPHINXOPTS: -W --keep-going
            run: |
                cd "$PROJECT_ROOT"
                poetry run make html --directory docs/
