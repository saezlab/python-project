# ===================================
# =======        BUILD       ========
# ===================================
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

#===================================
#=======       PROJECT      ========
#===================================
[project]
authors = [
  {name = "{{ cookiecutter.author_full_name }}", email="{{ cookiecutter.author_email }}"},
]
classifiers = [
    # How mature is this project? Common values are
    # 2 - Pre-Alpha
    # 3 - Alpha
    # 4 - Beta
    # 5 - Production/Stable
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: {{ cookiecutter._license[cookiecutter.license].license_classifiers }}",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Bio-Informatics"
]
dependencies = [
    "toml",
]
description = "{{ cookiecutter.short_description }}"
license = "{{ cookiecutter._license[cookiecutter.license].license_spdx }}"
maintainers = [
    {name="{{ cookiecutter.author_full_name }}", email="{{ cookiecutter.author_email }}"},
]
name = "{{ cookiecutter.project_slug }}"
# packages = [
#    { include = "{{ cookiecutter.package_name }}" }
# ]
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
version = "0.0.1"

[project.optional-dependencies]
dev = [
    "distlib",
    "pre-commit",
    "bump2version",
    "twine",
]
docs = [
    "mkdocs-material>=9.6.14",
    "pymdown-extensions>=10.15",
    "mkdocstrings[python]>=0.29.1,<0.30"
]
security = [
    "bandit"
]
tests = [
    "pytest>=6.0",
    "pytest-cov",
    "tox>=3.20.1",
    "tox-gh>=1.5.0",
    "coverage>=6.0",
    "codecov-cli>=10.2.0",
    "diff_cover",
    "ruff",
]

[project.urls]
Documentation = "https://{{ cookiecutter.github_organization }}.github.io/{{ cookiecutter.project_slug }}"
Homepage = "{{ cookiecutter.project_repo }}"
Issues = "{{ cookiecutter.project_repo }}/issues"
Repository = "{{ cookiecutter.project_repo }}"


#===================================
#=======        TOOL        ========
#===================================
#---- Bandit: tool for security analysis
[tool.bandit]
exclude_dirs = [".venv", "venv", ".tox", "build", "dist"]
skips = [
    "B101"  # Name: assert_used
]

#---- Coverage: a tool used to measure code coverage of Python programs
[tool.coverage.run]
omit = [
	"**/test_*.py",
]
source = ["{{ cookiecutter.package_name }}"]

#---- Cruft: a tool to manage and update projects based on templates
[tool.cruft]
skip = [
  "tests",
  "{{ cookiecutter.package_name }}/__init__.py",
  "{{ cookiecutter.package_name }}/_metadata.py",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
]

{% if cookiecutter.project_name.lower().replace("-", "_") != cookiecutter.package_name -%}
#---- Hatch: a modern Python project manager for builds, environments, and publishing
[tool.hatch.build.targets.wheel]
packages = [ "{{ cookiecutter.package_name }}" ]
{% endif -%}

#--- Pytest: a lightweight and scalable testing tool using the pytest framework
[tool.pytest.ini_options]
addopts = [
    # "-Werror",  # if 3rd party libs raise DeprecationWarnings, just use filterwarnings below
    "--import-mode=importlib",  # allow using test files with same name
]
filterwarnings = [
    # "ignore:.*U.*mode is deprecated:DeprecationWarning",
]
python_files = "test_*.py"
testpaths = [
  "tests",
]
xfail_strict = true

#---- RSTcheck: a tool to lint reStructuredText (.rst) files.
[tool.rstcheck]
ignore_directives = [
    "automodule",
    "toctree",
]
ignore_messages = '(Unknown target name:.*|No (directive|role) entry for "(auto)?(class|method|property|function|func|mod|attr)" in module "docutils\.parsers\.rst\.languages\.en"\.)'
ignore_roles = ["ref"]
report_level = "INFO"

#---- Ruff: a fast Python linter and formatter.
[tool.ruff]
extend-include = [ "*.ipynb" ]
line-length = 80
target-version = "py312"

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
exclude = [
    "docs/_build"
]
ignore = [
    # flake8-bugbear (B)
    "B008",  # Name: function-call-in-default-argument
    "B024",  # Name: abstract-base-class-without-abstract-method
    # pydocstyle (D)
    "D100",  # Name: undocumented-public-module
    "D104",  # Name: undocumented-public-package
    "D105",  # Name: undocumented-magic-method
    "D107",  # Name: undocumented-public-init
    "D200",  # Name: unnecessary-multiline-docstring
    "D202",  # Name: blank-line-after-function
    "D203",  # Name: incorrect-blank-line-before-class
    "D213",  # Name: multi-line-summary-second-line
    "D400",  # Name: missing-trailing-period
    "D401",  # Name: non-imperative-mood
    # Error (E)
    "E251",  # Name: unexpected-spaces-around-keyword-parameter-equals
    "E303",  # Name: too-many-blank-lines
    "E501",  # Name: line too long
    "E731",  # Name: lambda-assignment
    "E741"  # allow I, O, l as variable names -> I is the identity matrix
]
select = [
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error detected by Pycodestyle
    "F",  # Errors detected by Pyflakes
    "I",  # isort
    "RUF100",  # Report unused noqa directives
    "TID",  # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # Warning detected by Pycodestyle
    "Q",  # Consistent quotes
    "S307",  # eval() detection
    "ANN"  # flake8-annotations
]
unfixable = ["UP"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
force-sort-within-sections = true
force-wrap-aliases = true
known-first-party = [ "{{ cookiecutter.package_name }}" ]
known-third-party = ["numpy", "pandas"]
length-sort = true
lines-after-imports = 1
no-lines-before = ["local-folder"]
order-by-type = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["D104", "F401"]
"docs/*" = ["I"]
"docs/src/conf.py" = ["D100"]
"tests/*" = ["D"]
"tests/conftest.py" = ["D101", "D102", "D103", "E402"]

[tool.ruff.lint.pydocstyle]
convention = "google"

#---- tox: a tool to automate testing in multiple environments.
[tool.tox]
envlist = [
    "covclean",
    "lint",
    "py{39,310,311,312,313}",
    "coverage",
    "readme",
    "docs"
]
isolated_build = true
min_version = "3.20.0"
skip_missing_interpreters = true

[tool.tox.envs]
base_python = [
    "py39: python3.9",
    "py310: python3.10",
    "py311: python3.11",
    "py312: python3.12",
    "py313: python3.13"
]
commands = [
    "pytest --cov --cov-append --cov-config={toxinidir}/.coveragerc --ignore docs/ {posargs:-vv {env:_PYTEST_TOX_POSARGS:}}"
]
deps = [
    ".[tests]"
]
passenv = "TOXENV,CI,CODECOV_*,GITHUB_ACTIONS"
platform = [
    "linux: linux",
    "macos: (macos|osx|darwin)"
]
usedevelop = true

[tool.tox.envs.clean-docs]
allowlist_externals = ["make"]
changedir = "{toxinidir}/docs"
commands = [
    "make clean"
]
description = "Clean the documentation artifacts."
skip_install = true

[tool.tox.envs.covclean]
commands = [
    "coverage erase"
]
deps = [".[tests]"]
description = "Clean coverage files."
skip_install = true

[tool.tox.envs.coverage]
commands = [
    "coverage report --omit=\"tox/*\"",
    "coverage xml --omit=\"tox/*\" -o {toxinidir}/coverage.xml",
    "diff-cover --compare-branch origin/main {toxinidir}/coverage.xml"
]
depends = "py{39,310,311,312,313}"
deps = [".[tests]"]
description = "Report the coverage difference."
parallel_show_output = true
skip_install = true

[tool.tox.envs.docs]
allowlist_externals = ["uv"]
commands = [
    "uv sync --extra docs",
    "uv run sphinx-build --color -b html {toxinidir}/docs/source {toxinidir}/docs/build/html",
    "python -c 'import pathlib; print(f\"Documentation is available under:\", pathlib.Path(f\"{toxinidir}\") / \"docs\" / \"build\" / \"html\" / \"index.html\")'"
]
description = "Build the documentation."
skip_install = true

[tool.tox.envs.lint]
commands = [
    "pre-commit run --all-files --show-diff-on-failure {posargs:}"
]
deps = [".[dev]"]
description = "Perform linting."
skip_install = true

[tool.tox.envs.py313]
setenv = "_PYTEST_TOX_POSARGS=--log-cli-level=ERROR"

[tool.tox.envs.readme]
allowlist_externals = ["uv"]
commands = [
    "uv build --wheel --out-dir {envtmpdir}/build",
    "twine check {envtmpdir}/build/*"
]
deps = [".[dev]"]
description = "Check if README renders on PyPI."
skip_install = true

[tool.tox-gh-actions]
env = [
    "py313: covclean, lint, coverage, readme, docs"
]
python = [
    "3.9: py39",
    "3.10: py310",
    "3.11: py311",
    "3.12: py312",
    "3.13: py313"
]

[tool.uv.sources]
jupyter-contrib-nbextensions = {git = "https://github.com/deeenes/jupyter_contrib_nbextensions.git", branch = "master"}
nbsphinx = {git = "https://github.com/deeenes/nbsphinx", branch = "timings"}
