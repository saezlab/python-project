[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

{% if cookiecutter.project_name.lower().replace("-", "_") != cookiecutter.package_name -%}
[tool.hatch.build.targets.wheel]
packages = [ "{{ cookiecutter.package_name }}" ]

{% endif -%}
[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.0.1"
description = "{{ cookiecutter.project_description }}"
license = "{{ cookiecutter.license }}"
maintainers = [
    "{{ cookiecutter.author_full_name }} <{{ cookiecutter.author_email }}>"
]
authors = [
  { name = "{{ cookiecutter.author_full_name }}" },
]
packages = [
    { include = "{{ cookiecutter.package_name }}" }
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Bio-Informatics"
]
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
dependencies = [
    "toml",
]

[project.optional-dependencies]

[dependency-groups]
dev = [
    "distlib",
    "pre-commit>=2.17.0",
    "bump2version",
    "twine",
]
tests = [
    "pytest>=6.0",
    "tox=>=3.20.1",
    "tox-gh>=1.5.0",
    "coverage>=6.0",
    "codecov-cli>=10.2.0",
    "diff_cover",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-last-updated-by-git>=0.3",
    "sphinx-autodoc-typehints>=1.18.0",
    "sphinxcontrib-fulltoc>=1.2.0",
    "sphinxcontrib-bibtex",
    "sphinx-copybutton",
    "myst-parser",
    "myst-nb",
    "jupyterlab",
    "pydata-sphinx-theme",
    "sphinx-remove-toctrees",
    "jupyter-contrib-nbextensions",
    "nbsphinx",
]

[tool.uv.sources]
nbsphinx = { git = "https://github.com/deeenes/nbsphinx", branch = "timings" }
jupyter-contrib-nbextensions = { git = "https://github.com/deeenes/jupyter_contrib_nbextensions.git", branch = "master" }

[project.urls]
Homepage = "{{ cookiecutter.project_repo }}"
Repository = "{{ cookiecutter.project_repo }}"
Issues = "{{ cookiecutter.project_repo }}/issues"
Documentation = "https://{{ cookiecutter.project_slug }}.readthedocs.io/"

[tool.black]
line-length = 80
target-version = ['py31*']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
from_first = true
line_length = 80
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
known_num="numpy,pandas"
sections = "FUTURE,STDLIB,THIRDPARTY,NUM,FIRSTPARTY,LOCALFOLDER"
no_lines_before="LOCALFOLDER"
balanced_wrapping = true
force_grid_wrap = 0
length_sort = "1"
indent = "    "
skip = []

[tool.flake8]
extend-select = ["CE101"]
ignore = [
  "D200", "D202", "D401", "D105",
  "W503", "W504",
  "E731", "E131", "E251", "E303",
  "B024"
]
per-file-ignores = [
    "docs/src/conf.py:D100",
    "tests/*:D100,D101,D102,D103,D104,D105",
    "tests/conftest.py:D101,D102,D103,E402",
    "*/__init__.py:D104,F401"
]
max-line-length = 80
count = true
exclude = [
    ".git",
    "__pycache__",
    "build",
    "docs/_build",
    "dist"
]

[tool.yapf]
based_on_style = "facebook"
split_penalty_before_if_expr = 0
split_penalty_import_names = 0
split_penalty_comprehension = 0
split_penalty_for_added_line_split = 0
split_penalty_after_opening_bracket = 0
split_before_first_argument = true
split_before_named_assigns = true
split_complex_comprehension = true

[tool.rstcheck]
report_level = "INFO"
ignore_directives = [
    "automodule",
    "toctree",
]
ignore_roles = ["ref"]
ignore_messages = '(Unknown target name:.*|No (directive|role) entry for "(auto)?(class|method|property|function|func|mod|attr)" in module "docutils\.parsers\.rst\.languages\.en"\.)'

[tool.coverage.run]
source = ["{{ cookiecutter.package_name }}"]
omit = [
	"**/test_*.py",
]

[tool.pytest.ini_options]
python_files = "test_*.py"
testpaths = [
  "tests",
]
xfail_strict = true
addopts = [
    # "-Werror",  # if 3rd party libs raise DeprecationWarnings, just use filterwarnings below
    "--import-mode=importlib",  # allow using test files with same name
]
filterwarnings = [
    # "ignore:.*U.*mode is deprecated:DeprecationWarning",
]

[tool.tox]
min_version = 3.20.0
isolated_build = true
skip_missing_interpreters = true
envlist = [
    "covclean",
    "lint",
    "py{39,310,311,312,313}",
    "coverage",
    "readme",
    "docs",
]

[tool.tox-gh-actions]
python = [
    "3.9: py39",
    "3.10: py310",
    "3.11: py311",
    "3.12: py312",
    "3.13: py313",
]
env = [
    "py313: covclean, lint, coverage, readme, docs",
]

[tool.tox.envs]
platform = [
    "linux: linux",
    "macos: (macos|osx|darwin)",
]
base_python = [
    "py39: python3.9",
    "py310: python3.10",
    "py311: python3.11",
    "py312: python3.12",
    "py313: python3.13",
]
deps = [
    ".[tests]",
]
passenv = "TOXENV,CI,CODECOV_*,GITHUB_ACTIONS"
usedevelop = true
commands = [
    "pytest --cov --cov-append --cov-config={toxinidir}/.coveragerc --ignore docs/ {posargs:-vv {env:_PYTEST_TOX_POSARGS:}}",
]

[tool.tox.envs.py313]
setenv = "_PYTEST_TOX_POSARGS=--log-cli-level=ERROR"

[tool.tox.envs.covclean]
description = "Clean coverage files."
deps = [ ".[tests]" ]
skip_install = true
commands = [
    "coverage erase",
]

[tool.tox.envs.lint]
description = "Perform linting."
deps = [ ".[dev]" ]
skip_install = true
commands = [
    "pre-commit run --all-files --show-diff-on-failure {posargs:}",
]

[tool.tox.envs.coverage]
description = "Report the coverage difference."
deps = [ ".[tests]" ]
skip_install = true
depends = "py{39,310,311,312,313}"
parallel_show_output = true
commands = [
    "coverage report --omit=\"tox/*\"",
    "coverage xml --omit=\"tox/*\" -o {toxinidir}/coverage.xml",
    "diff-cover --compare-branch origin/main {toxinidir}/coverage.xml",
]

[testenv:docs]
description = "Build the documentation."
skip_install = true
allowlist_externals = [ "uv" ]
commands = [
    "uv sync --extra docs",
    "uv run sphinx-build --color -b html {toxinidir}/docs/source {toxinidir}/docs/build/html",
    "python -c 'import pathlib; print(f\"Documentation is available under:\", pathlib.Path(f\"{toxinidir}\") / \"docs\" / \"build\" / \"html\" / \"index.html\")'",
]

[testenv:clean-docs]
description = "Clean the documentation artifacts."
skip_install = true
changedir = "{toxinidir}/docs"
allowlist_externals = [ "make" ]
commands = [
    "make clean",
]

[testenv:readme]
description = "Check if README renders on PyPI."
deps = [ ".[dev]" ]
skip_install = true
allowlist_externals = [ "uv" ]
commands = [
    "uv build --wheel --out-dir {envtmpdir}/build",
    "twine check {envtmpdir}/build/*",
]

[tool.cruft]
skip = [
  "tests",
  "{{ cookiecutter.package_name }}/__init__.py",
  "{{ cookiecutter.package_name }}/_metadata.py",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
]
